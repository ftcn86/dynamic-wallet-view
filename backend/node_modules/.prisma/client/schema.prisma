// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// HIGH PRIORITY TABLES
// ========================================

// User profiles and authentication
model User {
  id       String  @id @default(cuid())
  piUid    String  @unique // Pi Network UID
  username String  @unique
  name     String
  email    String?
  avatar   String?
  bio      String?

  // Pi Network specific fields
  balance        Float   @default(0)
  miningRate     Float   @default(0)
  teamSize       Int     @default(0)
  isNodeOperator Boolean @default(false)
  kycStatus      String  @default("not_completed") // verified, pending, not_completed

  // Activity metrics
  userActiveMiningHours_LastWeek  Int @default(0)
  userActiveMiningHours_LastMonth Int @default(0)
  activeMiningDays_LastWeek       Int @default(0)
  activeMiningDays_LastMonth      Int @default(0)

  // Timestamps
  joinDate   DateTime @default(now())
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  sessions        Session[]
  transactions    Transaction[]
  teamMemberships TeamMembership[]
  notifications   Notification[]
  settings        UserSettings?

  @@map("users")
}

// User session management
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Payment and transaction history
model Transaction {
  id               String  @id @default(cuid())
  userId           String
  type             String // sent, received, mining_reward, node_bonus, etc.
  amount           Float
  status           String // completed, pending, failed
  from             String?
  to               String?
  description      String
  blockExplorerUrl String?

  // Pi Network specific
  piTransactionId String? // Pi Network transaction ID
  metadata        Json? // Additional transaction data

  // Timestamps
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// Team relationships and data
model TeamMembership {
  id       String   @id @default(cuid())
  userId   String // Team leader
  memberId String // Team member
  status   String   @default("active") // active, inactive, pending
  joinDate DateTime @default(now())

  // Member activity metrics
  memberActiveMiningHours_LastWeek  Int    @default(0)
  memberActiveMiningHours_LastMonth Int    @default(0)
  unverifiedPiContribution          Float  @default(0)
  kycStatus                         String @default("not_completed")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_memberships")
}

// User notification system
model Notification {
  id          String  @id @default(cuid())
  userId      String
  type        String // node_update, badge_earned, team_update, announcement, team_message
  title       String
  description String
  link        String?
  read        Boolean @default(false)

  // Timestamps
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// User preferences and settings
model UserSettings {
  id     String @id @default(cuid())
  userId String @unique

  // Theme and language
  theme    String @default("system") // light, dark, system
  language String @default("en")

  // Notifications
  notifications       Boolean @default(true)
  emailNotifications  Boolean @default(false)
  remindersEnabled    Boolean @default(true)
  reminderHoursBefore Int     @default(1)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}
